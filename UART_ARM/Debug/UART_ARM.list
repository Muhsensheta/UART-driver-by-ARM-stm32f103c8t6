
UART_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000638  08000640  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000638  08000638  00010640  2**0
                  CONTENTS
  4 .ARM          00000000  08000638  08000638  00010640  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000638  08000640  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000638  08000638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000640  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000640  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010640  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b15  00000000  00000000  00010669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005c5  00000000  00000000  0001117e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00011748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00011948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fb2  00000000  00000000  00011ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ab1  00000000  00000000  00012a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003fb1  00000000  00000000  00013533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000174e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000061c  00000000  00000000  00017534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000620 	.word	0x08000620

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000620 	.word	0x08000620

08000170 <M_GPIO_void_SetPinDir>:

#include "DIO_priv.h"
#include "DIO_int.h"

void M_GPIO_void_SetPinDir(u8 PortID , u8 PinID , u8 Dir)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16 && Dir < 16)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 80b6 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b0f      	cmp	r3, #15
 800018e:	f200 80b2 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 8000192:	797b      	ldrb	r3, [r7, #5]
 8000194:	2b0f      	cmp	r3, #15
 8000196:	f200 80ae 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
{
	if(PinID < 8) /*PIN0 : PIN7 --> CRL*/
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d852      	bhi.n	8000246 <M_GPIO_void_SetPinDir+0xd6>
	{
		switch(PortID)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d037      	beq.n	8000216 <M_GPIO_void_SetPinDir+0xa6>
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f300 80a6 	bgt.w	80002f8 <M_GPIO_void_SetPinDir+0x188>
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <M_GPIO_void_SetPinDir+0x46>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d018      	beq.n	80001e6 <M_GPIO_void_SetPinDir+0x76>
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
			break;
		}
	}
	}
}
 80001b4:	e0a0      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001b6:	4b53      	ldr	r3, [pc, #332]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	79ba      	ldrb	r2, [r7, #6]
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	210f      	movs	r1, #15
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	43d2      	mvns	r2, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a4e      	ldr	r2, [pc, #312]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001ca:	400b      	ands	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001ce:	4b4d      	ldr	r3, [pc, #308]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	7979      	ldrb	r1, [r7, #5]
 80001d4:	79ba      	ldrb	r2, [r7, #6]
 80001d6:	0092      	lsls	r2, r2, #2
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a49      	ldr	r2, [pc, #292]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	6013      	str	r3, [r2, #0]
			break;
 80001e4:	e088      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001e6:	4b48      	ldr	r3, [pc, #288]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a43      	ldr	r2, [pc, #268]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001fe:	4b42      	ldr	r3, [pc, #264]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a3e      	ldr	r2, [pc, #248]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
			break;
 8000214:	e070      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000216:	4b3d      	ldr	r3, [pc, #244]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	210f      	movs	r1, #15
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a38      	ldr	r2, [pc, #224]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 800022a:	400b      	ands	r3, r1
 800022c:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800022e:	4b37      	ldr	r3, [pc, #220]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	7979      	ldrb	r1, [r7, #5]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	4611      	mov	r1, r2
 800023e:	4a33      	ldr	r2, [pc, #204]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
			break;
 8000244:	e058      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	else if(PinID < 16) /*PIN0 : PIN7 --> CRL*/
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <M_GPIO_void_SetPinDir+0x186>
		PinID -=8;
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	3b08      	subs	r3, #8
 8000250:	71bb      	strb	r3, [r7, #6]
		switch(PortID)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d036      	beq.n	80002c6 <M_GPIO_void_SetPinDir+0x156>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc4d      	bgt.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <M_GPIO_void_SetPinDir+0xf6>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d018      	beq.n	8000296 <M_GPIO_void_SetPinDir+0x126>
}
 8000264:	e048      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000266:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a25      	ldr	r2, [pc, #148]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 800027a:	400b      	ands	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	7979      	ldrb	r1, [r7, #5]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000290:	430b      	orrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
			break;
 8000294:	e030      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	7979      	ldrb	r1, [r7, #5]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			break;
 80002c4:	e018      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	7979      	ldrb	r1, [r7, #5]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	0092      	lsls	r2, r2, #2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]
			break;
 80002f4:	e000      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	}
 80002f6:	bf00      	nop
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40011000 	.word	0x40011000
 8000310:	40010804 	.word	0x40010804
 8000314:	40010c04 	.word	0x40010c04
 8000318:	40011004 	.word	0x40011004

0800031c <EXTI0_IRQHandler>:
	}
}

//External Peripherals
void	EXTI0_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	EXTI0_CallBack(); // Ahmed();
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <EXTI0_IRQHandler+0x10>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000001c 	.word	0x2000001c

08000330 <EXTI1_IRQHandler>:
	}
}

//External Peripherals
void	EXTI1_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8000334:	4b02      	ldr	r3, [pc, #8]	; (8000340 <EXTI1_IRQHandler+0x10>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000020 	.word	0x20000020

08000344 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MRCC_voidSysClkInit+0x30>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a09      	ldr	r2, [pc, #36]	; (8000374 <MRCC_voidSysClkInit+0x30>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MRCC_voidSysClkInit+0x34>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a07      	ldr	r2, [pc, #28]	; (8000378 <MRCC_voidSysClkInit+0x34>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MRCC_voidSysClkInit+0x34>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <MRCC_voidSysClkInit+0x34>)
 8000366:	f023 0302 	bic.w	r3, r3, #2
 800036a:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000
 8000378:	40021004 	.word	0x40021004

0800037c <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	460a      	mov	r2, r1
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	4613      	mov	r3, r2
 800038a:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	2b1f      	cmp	r3, #31
 8000390:	d82a      	bhi.n	80003e8 <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d01c      	beq.n	80003d2 <MRCC_voidEnablePerClk+0x56>
 8000398:	2b02      	cmp	r3, #2
 800039a:	dc25      	bgt.n	80003e8 <MRCC_voidEnablePerClk+0x6c>
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <MRCC_voidEnablePerClk+0x2a>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d00b      	beq.n	80003bc <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 80003a4:	e020      	b.n	80003e8 <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MRCC_voidEnablePerClk+0x78>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <MRCC_voidEnablePerClk+0x78>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
 80003ba:	e015      	b.n	80003e8 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MRCC_voidEnablePerClk+0x7c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <MRCC_voidEnablePerClk+0x7c>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	e00a      	b.n	80003e8 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MRCC_voidEnablePerClk+0x80>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <MRCC_voidEnablePerClk+0x80>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]
 80003e6:	bf00      	nop
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021014 	.word	0x40021014
 80003f8:	4002101c 	.word	0x4002101c
 80003fc:	40021018 	.word	0x40021018

08000400 <STK_voidBusyWait>:
	#endif
		
}

void	STK_voidBusyWait(u32 Ticks)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	/*		Load Ticks to Load Register		*/
	STK -> LOAD	= Ticks;
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <STK_voidBusyWait+0x50>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6053      	str	r3, [r2, #4]
	/*		Start Timer 					*/
	SET_BIT(STK -> CTRL , 0);
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <STK_voidBusyWait+0x50>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <STK_voidBusyWait+0x50>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6013      	str	r3, [r2, #0]
	/*		Wait till the flag raised 		*/
	while((GET_BIT(STK -> CTRL , 16))== 0)
 800041a:	e000      	b.n	800041e <STK_voidBusyWait+0x1e>
	{
		asm("NOP");
 800041c:	bf00      	nop
	while((GET_BIT(STK -> CTRL , 16))== 0)
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <STK_voidBusyWait+0x50>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	0c1b      	lsrs	r3, r3, #16
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f7      	beq.n	800041c <STK_voidBusyWait+0x1c>
	}
	/*		Stop Timer 						*/
	CLR_BIT(STK -> CTRL , 0);
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <STK_voidBusyWait+0x50>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a07      	ldr	r2, [pc, #28]	; (8000450 <STK_voidBusyWait+0x50>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]
	STK -> LOAD	= 0;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <STK_voidBusyWait+0x50>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
	STK -> VAL	= 0;
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <STK_voidBusyWait+0x50>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
	
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000e010 	.word	0xe000e010

08000454 <SysTick_Handler>:
	Local_u32RemainingTime =  (STK -> VAL);
	return Local_u32RemainingTime;
}
//Core Peripheral
void	SysTick_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
	u8 Local_u8Temp ;
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <SysTick_Handler+0x50>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d111      	bne.n	8000486 <SysTick_Handler+0x32>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(STK -> CTRL , 1);
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <SysTick_Handler+0x54>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <SysTick_Handler+0x54>)
 8000468:	f023 0302 	bic.w	r3, r3, #2
 800046c:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(STK -> CTRL , 0);
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <SysTick_Handler+0x54>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <SysTick_Handler+0x54>)
 8000474:	f023 0301 	bic.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]
			STK -> LOAD	= 0;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <SysTick_Handler+0x54>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
			STK -> VAL	= 0;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <SysTick_Handler+0x54>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
	}
	SysTick_CallBack();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <SysTick_Handler+0x58>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4798      	blx	r3
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(STK -> CTRL , 16);
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <SysTick_Handler+0x54>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	0c1b      	lsrs	r3, r3, #16
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	71fb      	strb	r3, [r7, #7]
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000028 	.word	0x20000028
 80004a8:	e000e010 	.word	0xe000e010
 80004ac:	20000024 	.word	0x20000024

080004b0 <M_UART_void_Init>:
#include "BIT_MATH.h"
#include "UART_priv.h"
#include "UART_config.h"
#include "UART_ini.h"
void M_UART_void_Init(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

	 //USART DIV value
	 USART1->USART_BRR = 0x341; //for 8MHZ on APB2 bus
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <M_UART_void_Init+0x38>)
 80004b6:	f240 3241 	movw	r2, #833	; 0x341
 80004ba:	609a      	str	r2, [r3, #8]

	 //USART RE BIT ENABLE
	 SET_BIT(USART1->USART_CR1,2);
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <M_UART_void_Init+0x38>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <M_UART_void_Init+0x38>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	60d3      	str	r3, [r2, #12]
	 //USART TE BIT ENABLE
	 SET_BIT(USART1->USART_CR1,3);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <M_UART_void_Init+0x38>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <M_UART_void_Init+0x38>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	60d3      	str	r3, [r2, #12]
	 //USART UE BIT ENABLE
	 SET_BIT(USART1->USART_CR1,13);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <M_UART_void_Init+0x38>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <M_UART_void_Init+0x38>)
 80004da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004de:	60d3      	str	r3, [r2, #12]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40013800 	.word	0x40013800

080004ec <M_UART_void_sendByte>:
void  M_UART_void_sendByte(u8 Byte)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	 USART1->USART_DR = Byte;
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <M_UART_void_sendByte+0x28>)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	6053      	str	r3, [r2, #4]
	 while (! GET_BIT(USART1-> USART_SR ,6));
 80004fc:	bf00      	nop
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <M_UART_void_sendByte+0x28>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	099b      	lsrs	r3, r3, #6
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0fa      	beq.n	80004fe <M_UART_void_sendByte+0x12>
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40013800 	.word	0x40013800

08000518 <M_UART_u8_recieveByte>:
 u8 M_UART_u8_recieveByte(void )
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	 u8 Byte;
	 while (! GET_BIT(USART1-> USART_SR ,5));
 800051e:	bf00      	nop
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <M_UART_u8_recieveByte+0x24>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	095b      	lsrs	r3, r3, #5
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0fa      	beq.n	8000520 <M_UART_u8_recieveByte+0x8>
	 Byte= USART1->USART_DR;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <M_UART_u8_recieveByte+0x24>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	71fb      	strb	r3, [r7, #7]
	 return Byte;
 8000530:	79fb      	ldrb	r3, [r7, #7]
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40013800 	.word	0x40013800

08000540 <main>:
#include	"UART_ini.h"



int	main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/
	
	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 8000544:	f7ff fefe 	bl	8000344 <MRCC_voidSysClkInit>
	
	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port A		*/

	MRCC_voidEnablePerClk(RCC_APB2,2);
 8000548:	2102      	movs	r1, #2
 800054a:	2002      	movs	r0, #2
 800054c:	f7ff ff16 	bl	800037c <MRCC_voidEnablePerClk>
	MRCC_voidEnablePerClk(RCC_APB2,14);
 8000550:	210e      	movs	r1, #14
 8000552:	2002      	movs	r0, #2
 8000554:	f7ff ff12 	bl	800037c <MRCC_voidEnablePerClk>

	
	/*	Direction for PA9 is output AF */
	M_GPIO_void_SetPinDir(PORTA_ID, PIN9_ID, OUT_50MHZ_AF_PP);
 8000558:	220b      	movs	r2, #11
 800055a:	2109      	movs	r1, #9
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe07 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(PORTA_ID, PIN10_ID, IN_FLOATING);
 8000562:	2204      	movs	r2, #4
 8000564:	210a      	movs	r1, #10
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff fe02 	bl	8000170 <M_GPIO_void_SetPinDir>

	M_UART_void_Init();
 800056c:	f7ff ffa0 	bl	80004b0 <M_UART_void_Init>
	
	while(1)
	{
		 M_UART_void_sendByte('5');
 8000570:	2035      	movs	r0, #53	; 0x35
 8000572:	f7ff ffbb 	bl	80004ec <M_UART_void_sendByte>
		 STK_voidBusyWait(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057a:	f7ff ff41 	bl	8000400 <STK_voidBusyWait>
        M_UART_u8_recieveByte();
 800057e:	f7ff ffcb 	bl	8000518 <M_UART_u8_recieveByte>
		 M_UART_void_sendByte('5');
 8000582:	e7f5      	b.n	8000570 <main+0x30>

08000584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000588:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b2:	f000 f811 	bl	80005d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff ffc3 	bl	8000540 <main>

080005ba <LoopForever>:

LoopForever:
  b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005c8:	08000640 	.word	0x08000640
  ldr r2, =_sbss
 80005cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005d0:	2000002c 	.word	0x2000002c

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <__libc_init_array>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	2600      	movs	r6, #0
 80005dc:	4d0c      	ldr	r5, [pc, #48]	; (8000610 <__libc_init_array+0x38>)
 80005de:	4c0d      	ldr	r4, [pc, #52]	; (8000614 <__libc_init_array+0x3c>)
 80005e0:	1b64      	subs	r4, r4, r5
 80005e2:	10a4      	asrs	r4, r4, #2
 80005e4:	42a6      	cmp	r6, r4
 80005e6:	d109      	bne.n	80005fc <__libc_init_array+0x24>
 80005e8:	f000 f81a 	bl	8000620 <_init>
 80005ec:	2600      	movs	r6, #0
 80005ee:	4d0a      	ldr	r5, [pc, #40]	; (8000618 <__libc_init_array+0x40>)
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <__libc_init_array+0x44>)
 80005f2:	1b64      	subs	r4, r4, r5
 80005f4:	10a4      	asrs	r4, r4, #2
 80005f6:	42a6      	cmp	r6, r4
 80005f8:	d105      	bne.n	8000606 <__libc_init_array+0x2e>
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000600:	4798      	blx	r3
 8000602:	3601      	adds	r6, #1
 8000604:	e7ee      	b.n	80005e4 <__libc_init_array+0xc>
 8000606:	f855 3b04 	ldr.w	r3, [r5], #4
 800060a:	4798      	blx	r3
 800060c:	3601      	adds	r6, #1
 800060e:	e7f2      	b.n	80005f6 <__libc_init_array+0x1e>
 8000610:	08000638 	.word	0x08000638
 8000614:	08000638 	.word	0x08000638
 8000618:	08000638 	.word	0x08000638
 800061c:	0800063c 	.word	0x0800063c

08000620 <_init>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr

0800062c <_fini>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr
